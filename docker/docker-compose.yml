version: '3'
services:
  db:
    image: farmdata2/postgres:fd2.1
    container_name: fd2_postgres
    volumes:
      # Use docker volume for performance.
      # Bump version here and in volumes if new image requires new db.
      - 'farmos2_db_fd2.1:/var/lib/postgresql/data'
    networks:
      - farmdata2
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: farm
      POSTGRES_PASSWORD: farm
      POSTGRES_DB: farm

  farmos:
    depends_on:
      - db
    image: farmdata2/farmos2:fd2.1
    container_name: fd2_farmos
    volumes:
      # Mount the dist directories containing the fd2 modules into the farmOS container.
      - '../modules/farm_fd2/dist:/opt/drupal/web/sites/all/modules/farm_fd2'
      - '../modules/farm_fd2_example/dist:/opt/drupal/web/sites/all/modules/farm_fd2_example'
      - '../modules/farm_fd2_school/dist:/opt/drupal/web/sites/all/modules/farm_fd2_school'
    networks:
      - farmdata2
    ports:
      - '80:80'
    environment:
      XDEBUG_MODE: debug
      XDEBUG_CONFIG: discover_client_host=yes

# Note: We use separate profiles for unix vs windows systems
#       This is necessary to mount /var/run/docker.sock due to 
#       different syntax for absolute paths on windows.

  fd2dev-unix:
    depends_on:
      - db
      - farmos
    image: farmdata2/fd2dev:fd2.1
    container_name: fd2_dev
    init: true
    networks:
      - farmdata2
    volumes:
      # Mount the FarmData2 repo into the fd2dev user's home directory.
      - ..:/home/fd2dev/FarmData2
      # Mount the docker.sock so we can run docker commands in the container.
      - /var/run/docker.sock:/var/run/docker.sock
      # Preserve the fd2dev user's home directory on a docker volume.
      # Bump the version here, in fd2dev_windows, and in volumes below 
      # if image rebuid reqires new home.
      - farmdev_home_fd2.1:/home/fd2dev
      # Mount a docker volume into which the farmOS database will be built.
      # This allows switching the database from within the dev container.
      # This has significantly better performance than mounting a host directory.
      # Bump the version here if a new db volume is required.
      - farmos_db_fd2.1:/home/fd2dev/FarmData2/docker/db
      # Mount the group ID information used to manage permissions.
      # The mounted file is generated by the fd2-up.bash script.
      # This is necessary to ensure that the fd2dev user has 
      # docker and write permission.
      - ~/.fd2gids:/home/fd2dev/.contconf/gids
    ports:
      - 5901:5901
      - 6901:6901
    profiles:
      - macos
      - linux

  fd2dev-win:
    depends_on:
      - db
      - farmos
    image: farmdata2/fd2dev:fd2.1
    container_name: fd2_dev
    init: true
    networks:
      - farmdata2
    volumes:
      # Everything is the same as in fd2dev-unix service except the //
      # when mounting the docker.sock on windows.
      - ..:/home/fd2dev/FarmData2
      - //var/run/docker.sock:/var/run/docker.sock
      - fd2dev_home_fd2.1:/home/fd2dev
      - farmos_db_fd2.1:/home/fd2dev/FarmData2/docker/db
      - ~/.fd2gids:/home/fd2dev/.contconf/gids
    ports:
      - 5901:5901
      - 6901:6901
    profiles:
      - windows

volumes:
  farmos2_db_fd2.1:
  fd2dev_home_fd2.1:

networks:
  fd2_network:
    name: farmdata2