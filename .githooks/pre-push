#!/bin/bash

# Change into the main repo directory.
SCRIPT_PATH=$(readlink -f "$0")                     # Path to this script.
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")                # Path to directory containing this script.
REPO_ROOT_DIR=$(builtin cd "$SCRIPT_DIR/.." && pwd) # REPO root directory.

source "$REPO_ROOT_DIR/bin/colors.bash"
source "$REPO_ROOT_DIR/bin/lib.bash"

echo "Running FarmData2 pre-push hook..."

read -r line
if [ "$line" = "" ]; then
  echo "Done."
  exit 0
fi

LOCAL_BRANCH=$(echo "$line" | cut -f3 -d'/' | cut -f1 -d' ')
REMOTE_BRANCH=$(echo "$line" | cut -f3 -d' ' | cut -f3 -d'/')

if [ "$REMOTE_BRANCH" = "development" ]; then
  echo "Starting post-push script..."
  (
    sleep 5
    "$REPO_ROOT_DIR/.githooks/drupal-release"
  ) &
  exit 0
fi

# Only run this hook when pushing to the production branch.
if [ "$REMOTE_BRANCH" = "production" ]; then

  echo "  Pushing to the production branch."
  echo "  A release will be prepared on git.drupalcode.org..."

  if [ "$LOCAL_BRANCH" = "production" ]; then

    # echo "    Pushing FarmData2 production branch to GitHub."
    # safe_cd "$REPO_ROOT_DIR"
    # git push --quiet --no-verify origin production
    # error_check "Failed to push FarmData2 production branch to GitHub."

    # # Assumes that the most recent run on production is the one we want.
    # # This could be problematic if there are multiple runs at once.
    # RUN_ID=$(gh run list --repo farmdata2/temp-spike --workflow FD2Release --branch production --event push --limit 1 | tail -1 | cut -d$'\t' -f7)
    # echo "$RUN_ID"

    # echo "    Watching the FarmData2 FD2Release action on farmdata2/temp-spike..."
    # gh run watch --repo farmdata2/temp-spike "$RUN_ID" --exit-status -i 2
    # error_check "FarmData2 FD2Release action has failed."

    # if [ -d /var/tmp/farmdata2 ]; then
    #   echo "    Removing existing farmdata2 clone..."
    #   rm -rf /var/tmp/farmdata2
    # fi

    # echo "    Creating clone of farmdata2 from git.drupalcode.org..."
    # git clone --quiet https://git.drupalcode.org/project/farmdata2.git /var/tmp/farmdata2
    # error_check "Failed to clone farmdata2 from git.drupalcode.org."

    # echo "    Copying files from farm_fd2/dist/farmdata to clone..."
    # cp -Ru modules/farm_fd2/dist/farmdata2/* /var/tmp/farmdata2/
    # error_check "Failed to copy files from farm_fd2/dist/farmdata2."

    # safe_cd /var/tmp/farmdata2

    # echo "    Checking status of farmdata2 clone..."
    # STATUS=$(git status | grep "nothing to commit, working tree clean")
    # if [ "$STATUS" = "" ]; then
    #   echo "    Staging and committing to release branch in farmdata2 clone..."
    #   git switch --quiet release
    #   error_check "Failed to switch to release branch."
    #   git stage .
    #   error_check "Failed to stage files."
    #   git commit --no-verify --quiet -m "updated to release "
    #   error_check "Failed to commit files."

    #   echo "    Pushing farmdata2 clone to git.drupalcode.org..."
    #   git push --quiet --no-verify origin release
    #   error_check "Failed to push farmdata2 clone to git.drupalcode.org."
    # else
    #   echo "    No changes to farmdata2 module to be committed."
    # fi

    # # Create the tag anyway so that it stays in synch with the GitHub release.
    # echo "    Creating tag $RELEASE on git.drupalcode.org..."
    # safe_cd /var/tmp/farmdata2
    # RELEASE=$(gh release list --repo farmdata2/temp-spike | grep Latest | cut -f1)
    # RELEASE="${RELEASE:1}"
    # git tag -a "$RELEASE" -m "Release $RELEASE"
    # error_check "Failed to create tag $RELEASE."
    # git push --no-verify origin "$RELEASE"
    # error_check "Failed to push tag $RELEASE to git.drupalcode.org."

    # echo "Done."

    # echo
    # echo "farmdata2 on git.drupalcode.org is ready for a new release."
    # echo "Visit https://www.drupal.org/node/add/project-release/3396323 to create the release."
    # echo

    echo "When release is created on GitHub, run the DrupalRelease script"
    echo "to create a release on git.drupalcode.org."
    exit 0
  else
    echo
    echo "Only the local production branch may be pushed to the remote production branch."
    echo
    exit 255
  fi
else
  # Not pushing to the production branch
  echo "Done."
  exit 0
fi
